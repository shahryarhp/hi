
AVRASM ver. 2.1.30  D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm Mon Dec 31 23:20:20 2018

D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1086): warning: Register r4 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1088): warning: Register r6 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1089): warning: Register r7 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1090): warning: Register r8 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1092): warning: Register r10 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1094): warning: Register r12 already defined by the .DEF directive
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1095): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _str=R4
                 	.DEF _str_msb=R5
                 	.DEF _number=R6
                 	.DEF _number_msb=R7
                 	.DEF _number2=R8
                 	.DEF _number2_msb=R9
                 	.DEF _select=R10
                 	.DEF _select_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c027      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 0000
000014 002d      	.DB  0x0,0x0,0x2D,0x0
000015 0000
000016 0004      	.DB  0x0,0x0,0x4,0x0
                 
                 _0x2000003:
000017 c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1132): warning: .cseg .db misalignment - padding zero byte
000018 0001      	.DB  0x1
                 _0x2020000:
000019 4e2d
00001a 4e41
00001b 4900
00001c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\termeh 7\embedded systems\project\final_atmega8\Debug\List\proj.asm(1135): warning: .cseg .db misalignment - padding zero byte
00001d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00001e 0008      	.DW  0x08
00001f 0006      	.DW  0x06
000020 0026      	.DW  __REG_VARS*2
                 
000021 0002      	.DW  0x02
000022 0162      	.DW  __base_y_G100
000023 002e      	.DW  _0x2000003*2
                 
000024 0001      	.DW  0x01
000025 0169      	.DW  __seed_G101
000026 0030      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000027 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000028 94f8      	CLI
000029 27ee      	CLR  R30
00002a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002b e0f1      	LDI  R31,1
00002c bffb      	OUT  GICR,R31
00002d bfeb      	OUT  GICR,R30
00002e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00002f e08d      	LDI  R24,(14-2)+1
000030 e0a2      	LDI  R26,2
000031 27bb      	CLR  R27
                 __CLEAR_REG:
000032 93ed      	ST   X+,R30
000033 958a      	DEC  R24
000034 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000035 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000036 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000037 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000038 93ed      	ST   X+,R30
000039 9701      	SBIW R24,1
00003a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003b e3ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003d 9185      	LPM  R24,Z+
00003e 9195      	LPM  R25,Z+
00003f 9700      	SBIW R24,0
000040 f061      	BREQ __GLOBAL_INI_END
000041 91a5      	LPM  R26,Z+
000042 91b5      	LPM  R27,Z+
000043 9005      	LPM  R0,Z+
000044 9015      	LPM  R1,Z+
000045 01bf      	MOVW R22,R30
000046 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000047 9005      	LPM  R0,Z+
000048 920d      	ST   X+,R0
000049 9701      	SBIW R24,1
00004a f7e1      	BRNE __GLOBAL_INI_LOOP
00004b 01fb      	MOVW R30,R22
00004c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004e bfed      	OUT  SPL,R30
00004f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000050 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000051 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000052 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000053 c09c      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;char *str;
                 ; int number=0;
                 ; int number2=45;
                 ;int select=0,i=4;
                 ;int j;
                 ;
                 ;
                 ;void init(){
                 ; 0000 000E void init(){
                 
                 	.CSEG
                 _init:
                 ; .FSTART _init
                 ; 0000 000F DDRD=0x02;
000054 e0e2      	LDI  R30,LOW(2)
000055 bbe1      	OUT  0x11,R30
                 ; 0000 0010   DDRC=0xff;
000056 efef      	LDI  R30,LOW(255)
000057 bbe4      	OUT  0x14,R30
                 ; 0000 0011 UBRRH = 0x33;                      // shift the register right by 8 bits
000058 e3e3      	LDI  R30,LOW(51)
000059 bde0      	OUT  0x20,R30
                 ; 0000 0012     UBRRL = 0;                           // set baud rate
00005a e0e0      	LDI  R30,LOW(0)
00005b b9e9      	OUT  0x9,R30
                 ; 0000 0013     UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
00005c b1ea      	IN   R30,0xA
00005d 61e8      	ORI  R30,LOW(0x18)
00005e b9ea      	OUT  0xA,R30
                 ; 0000 0014     UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
00005f b5e0      	IN   R30,0x20
000060 68e6      	ORI  R30,LOW(0x86)
000061 bde0      	OUT  0x20,R30
                 ; 0000 0015 }
000062 9508      	RET
                 ; .FEND
                 ;void read(){
                 ; 0000 0016 void read(){
                 ; 0000 0017   while((UCSRA & (1<<RXC))==0);
                 ; 0000 0018      PORTC=UDR;
                 ; 0000 0019 
                 ; 0000 001A    }
                 ;void write(){
                 ; 0000 001B void write(){
                 _write:
                 ; .FSTART _write
                 ; 0000 001C 
                 ; 0000 001D       while((UCSRA & (1<<UDRE))==0);
                 _0x6:
000063 9b5d      	SBIS 0xB,5
000064 cffe      	RJMP _0x6
                 ; 0000 001E        UDR=number2;
000065 b88c      	OUT  0xC,R8
                 ; 0000 001F   }
000066 9508      	RET
                 ; .FEND
                 ;
                 ; int check2(int a,int b){
                 ; 0000 0021 int check2(int a,int b){
                 _check2:
                 ; .FSTART _check2
                 ; 0000 0022   //PORTC=0XFF;
                 ; 0000 0023   if(a==1){
000067 93ba      	ST   -Y,R27
000068 93aa      	ST   -Y,R26
                 ;	a -> Y+2
                 ;	b -> Y+0
000069 d151      	RCALL SUBOPT_0x0
00006a 9711      	SBIW R26,1
00006b f4a1      	BRNE _0x9
                 ; 0000 0024    switch(b){
00006c d151      	RCALL SUBOPT_0x1
                 ; 0000 0025      case (1):
00006d f419      	BRNE _0xD
                 ; 0000 0026        return 13;
00006e e0ed      	LDI  R30,LOW(13)
00006f e0f0      	LDI  R31,HIGH(13)
000070 c053      	RJMP _0x20A0002
                 ; 0000 0027        break;
                 ; 0000 0028      case (2):
                 _0xD:
000071 d152      	RCALL SUBOPT_0x2
000072 f419      	BRNE _0xE
                 ; 0000 0029        return 9;
000073 e0e9      	LDI  R30,LOW(9)
000074 e0f0      	LDI  R31,HIGH(9)
000075 c04e      	RJMP _0x20A0002
                 ; 0000 002A        break;
                 ; 0000 002B      case (3):
                 _0xE:
000076 d151      	RCALL SUBOPT_0x3
000077 f419      	BRNE _0xF
                 ; 0000 002C        return 8;
000078 e0e8      	LDI  R30,LOW(8)
000079 e0f0      	LDI  R31,HIGH(8)
00007a c049      	RJMP _0x20A0002
                 ; 0000 002D        break;
                 ; 0000 002E      case (4):
                 _0xF:
00007b d150      	RCALL SUBOPT_0x4
00007c f419      	BRNE _0xC
                 ; 0000 002F        return 7;
00007d e0e7      	LDI  R30,LOW(7)
00007e e0f0      	LDI  R31,HIGH(7)
00007f c044      	RJMP _0x20A0002
                 ; 0000 0030        break;
                 ; 0000 0031     }
                 _0xC:
                 ; 0000 0032   }
                 ; 0000 0033   if(a==2){
                 _0x9:
000080 d13a      	RCALL SUBOPT_0x0
000081 9712      	SBIW R26,2
000082 f4a1      	BRNE _0x11
                 ; 0000 0034    switch(b){
000083 d13a      	RCALL SUBOPT_0x1
                 ; 0000 0035      case (1):
000084 f419      	BRNE _0x15
                 ; 0000 0036        return 10;
000085 e0ea      	LDI  R30,LOW(10)
000086 e0f0      	LDI  R31,HIGH(10)
000087 c03c      	RJMP _0x20A0002
                 ; 0000 0037        break;
                 ; 0000 0038      case (2):
                 _0x15:
000088 d13b      	RCALL SUBOPT_0x2
000089 f419      	BRNE _0x16
                 ; 0000 0039        return 6;
00008a e0e6      	LDI  R30,LOW(6)
00008b e0f0      	LDI  R31,HIGH(6)
00008c c037      	RJMP _0x20A0002
                 ; 0000 003A        break;
                 ; 0000 003B      case (3):
                 _0x16:
00008d d13a      	RCALL SUBOPT_0x3
00008e f419      	BRNE _0x17
                 ; 0000 003C        return 5;
00008f e0e5      	LDI  R30,LOW(5)
000090 e0f0      	LDI  R31,HIGH(5)
000091 c032      	RJMP _0x20A0002
                 ; 0000 003D        break;
                 ; 0000 003E      case (4):
                 _0x17:
000092 d139      	RCALL SUBOPT_0x4
000093 f419      	BRNE _0x14
                 ; 0000 003F        return 4;
000094 e0e4      	LDI  R30,LOW(4)
000095 e0f0      	LDI  R31,HIGH(4)
000096 c02d      	RJMP _0x20A0002
                 ; 0000 0040        break;
                 ; 0000 0041     }
                 _0x14:
                 ; 0000 0042    }
                 ; 0000 0043     if(a==3){
                 _0x11:
000097 d123      	RCALL SUBOPT_0x0
000098 9713      	SBIW R26,3
000099 f4a1      	BRNE _0x19
                 ; 0000 0044      switch(b){
00009a d123      	RCALL SUBOPT_0x1
                 ; 0000 0045      case (1):
00009b f419      	BRNE _0x1D
                 ; 0000 0046        return 11;
00009c e0eb      	LDI  R30,LOW(11)
00009d e0f0      	LDI  R31,HIGH(11)
00009e c025      	RJMP _0x20A0002
                 ; 0000 0047        break;
                 ; 0000 0048      case (2):
                 _0x1D:
00009f d124      	RCALL SUBOPT_0x2
0000a0 f419      	BRNE _0x1E
                 ; 0000 0049        return 3;
0000a1 e0e3      	LDI  R30,LOW(3)
0000a2 e0f0      	LDI  R31,HIGH(3)
0000a3 c020      	RJMP _0x20A0002
                 ; 0000 004A        break;
                 ; 0000 004B      case (3):
                 _0x1E:
0000a4 d123      	RCALL SUBOPT_0x3
0000a5 f419      	BRNE _0x1F
                 ; 0000 004C        return 2;
0000a6 e0e2      	LDI  R30,LOW(2)
0000a7 e0f0      	LDI  R31,HIGH(2)
0000a8 c01b      	RJMP _0x20A0002
                 ; 0000 004D        break;
                 ; 0000 004E      case (4):
                 _0x1F:
0000a9 d122      	RCALL SUBOPT_0x4
0000aa f419      	BRNE _0x1C
                 ; 0000 004F        return 1;
0000ab e0e1      	LDI  R30,LOW(1)
0000ac e0f0      	LDI  R31,HIGH(1)
0000ad c016      	RJMP _0x20A0002
                 ; 0000 0050        break;
                 ; 0000 0051     }
                 _0x1C:
                 ; 0000 0052    }
                 ; 0000 0053   if(a==4){
                 _0x19:
0000ae d10c      	RCALL SUBOPT_0x0
0000af 9714      	SBIW R26,4
0000b0 f499      	BRNE _0x21
                 ; 0000 0054     switch(b){
0000b1 d10c      	RCALL SUBOPT_0x1
                 ; 0000 0055      case (1):
0000b2 f419      	BRNE _0x25
                 ; 0000 0056        return 12;
0000b3 e0ec      	LDI  R30,LOW(12)
0000b4 e0f0      	LDI  R31,HIGH(12)
0000b5 c00e      	RJMP _0x20A0002
                 ; 0000 0057        break;
                 ; 0000 0058      case (2):
                 _0x25:
0000b6 d10d      	RCALL SUBOPT_0x2
0000b7 f419      	BRNE _0x26
                 ; 0000 0059        return 14;
0000b8 e0ee      	LDI  R30,LOW(14)
0000b9 e0f0      	LDI  R31,HIGH(14)
0000ba c009      	RJMP _0x20A0002
                 ; 0000 005A        break;
                 ; 0000 005B      case (3):
                 _0x26:
0000bb d10c      	RCALL SUBOPT_0x3
0000bc f419      	BRNE _0x27
                 ; 0000 005C        return 0;
0000bd e0e0      	LDI  R30,LOW(0)
0000be e0f0      	LDI  R31,HIGH(0)
0000bf c004      	RJMP _0x20A0002
                 ; 0000 005D        break;
                 ; 0000 005E      case (4):
                 _0x27:
0000c0 d10b      	RCALL SUBOPT_0x4
0000c1 f411      	BRNE _0x24
                 ; 0000 005F        return 15;
0000c2 e0ef      	LDI  R30,LOW(15)
0000c3 e0f0      	LDI  R31,HIGH(15)
                 ; 0000 0060        break;
                 ; 0000 0061     }
                 _0x24:
                 ; 0000 0062   }
                 ; 0000 0063 
                 ; 0000 0064 }
                 _0x21:
                 _0x20A0002:
0000c4 9624      	ADIW R28,4
0000c5 9508      	RET
                 ; .FEND
                 ;
                 ;    void check(){
                 ; 0000 0066 void check(){
                 _check:
                 ; .FSTART _check
                 ; 0000 0067 
                 ; 0000 0068   if( (PINB & (0b00001000))!=0){
0000c6 9bb3      	SBIS 0x16,3
0000c7 c004      	RJMP _0x29
                 ; 0000 0069     select=1;
0000c8 e0e1      	LDI  R30,LOW(1)
0000c9 e0f0      	LDI  R31,HIGH(1)
0000ca d105      	RCALL SUBOPT_0x5
                 ; 0000 006A    // PORTB=PIND;
                 ; 0000 006B     j=i;
                 ; 0000 006C     number=check2(j-3,select);
                 ; 0000 006D     //PORTC=number;
                 ; 0000 006E     itoa(number,str);
                 ; 0000 006F     lcd_puts(str);
                 ; 0000 0070     delay_ms(200);
                 ; 0000 0071     /*i++;
                 ; 0000 0072     if(i==8)
                 ; 0000 0073     i=4;
                 ; 0000 0074   PORTD=(1<<i);*/
                 ; 0000 0075     }
                 ; 0000 0076   else if( (PINB & (0b00000100))!=0){
0000cb c021      	RJMP _0x2A
                 _0x29:
0000cc 9bb2      	SBIS 0x16,2
0000cd c004      	RJMP _0x2B
                 ; 0000 0077     select=2;
0000ce e0e2      	LDI  R30,LOW(2)
0000cf e0f0      	LDI  R31,HIGH(2)
0000d0 d0ff      	RCALL SUBOPT_0x5
                 ; 0000 0078 	//PORTB=PIND;
                 ; 0000 0079 	j=i;
                 ; 0000 007A 	number=check2(j-3,select);
                 ; 0000 007B 	//PORTC=number;
                 ; 0000 007C    itoa(number,str);
                 ; 0000 007D     lcd_puts(str);
                 ; 0000 007E 	delay_ms(200);
                 ; 0000 007F 	/*i++;
                 ; 0000 0080 	if(i==8)
                 ; 0000 0081     i=4;
                 ; 0000 0082   PORTD=(1<<i);*/
                 ; 0000 0083 	}
                 ; 0000 0084   else if( (PINB & (0b00000010))!=0){
0000d1 c01b      	RJMP _0x2C
                 _0x2B:
0000d2 9bb1      	SBIS 0x16,1
0000d3 c004      	RJMP _0x2D
                 ; 0000 0085     select=3;
0000d4 e0e3      	LDI  R30,LOW(3)
0000d5 e0f0      	LDI  R31,HIGH(3)
0000d6 d0f9      	RCALL SUBOPT_0x5
                 ; 0000 0086 	//PORTB=PIND;
                 ; 0000 0087 	j=i;
                 ; 0000 0088 	number=check2(j-3,select);
                 ; 0000 0089 	//PORTC=number;
                 ; 0000 008A     itoa(number,str);
                 ; 0000 008B     lcd_puts(str);
                 ; 0000 008C 	delay_ms(200);
                 ; 0000 008D 	/*i++;
                 ; 0000 008E 	if(i==8)
                 ; 0000 008F     i=4;
                 ; 0000 0090   PORTD=(1<<i);*/
                 ; 0000 0091 	}
                 ; 0000 0092   else if( (PINB & (0b00000001))!=0){
0000d7 c015      	RJMP _0x2E
                 _0x2D:
0000d8 9bb0      	SBIS 0x16,0
0000d9 c004      	RJMP _0x2F
                 ; 0000 0093     select=4;
0000da e0e4      	LDI  R30,LOW(4)
0000db e0f0      	LDI  R31,HIGH(4)
0000dc d0f3      	RCALL SUBOPT_0x5
                 ; 0000 0094 	//PORTB=PIND;
                 ; 0000 0095 	j=i;
                 ; 0000 0096     number=check2(j-3,select);
                 ; 0000 0097 	//PORTC=number;
                 ; 0000 0098     itoa(number,str);
                 ; 0000 0099     lcd_puts(str);
                 ; 0000 009A 	delay_ms(200);
                 ; 0000 009B /*	i++;
                 ; 0000 009C 	if(i==8)
                 ; 0000 009D     i=4;
                 ; 0000 009E   PORTD=(1<<i);*/
                 ; 0000 009F 	}
                 ; 0000 00A0   else{
0000dd c00f      	RJMP _0x30
                 _0x2F:
                 ; 0000 00A1     i++;
0000de 01f6      	MOVW R30,R12
0000df 9631      	ADIW R30,1
0000e0 016f      	MOVW R12,R30
                 ; 0000 00A2 	if(i==8)
0000e1 e0e8      	LDI  R30,LOW(8)
0000e2 e0f0      	LDI  R31,HIGH(8)
0000e3 15ec      	CP   R30,R12
0000e4 05fd      	CPC  R31,R13
0000e5 f419      	BRNE _0x31
                 ; 0000 00A3     i=4;
0000e6 e0e4      	LDI  R30,LOW(4)
0000e7 e0f0      	LDI  R31,HIGH(4)
0000e8 016f      	MOVW R12,R30
                 ; 0000 00A4   PORTB=(1<<i);
                 _0x31:
0000e9 2dec      	MOV  R30,R12
0000ea e0a1      	LDI  R26,LOW(1)
0000eb d113      	RCALL __LSLB12
0000ec bbe8      	OUT  0x18,R30
                 ; 0000 00A5   }
                 _0x30:
                 _0x2E:
                 _0x2C:
                 _0x2A:
                 ; 0000 00A6 
                 ; 0000 00A7 
                 ; 0000 00A8   delay_ms(20);
0000ed e1a4      	LDI  R26,LOW(20)
0000ee d0f9      	RCALL SUBOPT_0x6
                 ; 0000 00A9 }
0000ef 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ; void main(){
                 ; 0000 00AC void main(){
                 _main:
                 ; .FSTART _main
                 ; 0000 00AD  init();
0000f0 df63      	RCALL _init
                 ; 0000 00AE // Alphanumeric LCD initialization
                 ; 0000 00AF // Connections are specified in the
                 ; 0000 00B0 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B1 // RS - PORTD Bit 0
                 ; 0000 00B2 // RD - PORTD Bit 1
                 ; 0000 00B3 // EN - PORTD Bit 2
                 ; 0000 00B4 // D4 - PORTD Bit 4
                 ; 0000 00B5 // D5 - PORTD Bit 5
                 ; 0000 00B6 // D6 - PORTD Bit 6
                 ; 0000 00B7 // D7 - PORTD Bit 7
                 ; 0000 00B8 // Characters/line: 8
                 ; 0000 00B9 
                 ; 0000 00BA lcd_init(16);
0000f1 e1a0      	LDI  R26,LOW(16)
0000f2 d070      	RCALL _lcd_init
                 ; 0000 00BB 
                 ; 0000 00BC while (1)
                 _0x32:
                 ; 0000 00BD       {
                 ; 0000 00BE       // Place your code here
                 ; 0000 00BF          check();
0000f3 dfd2      	RCALL _check
                 ; 0000 00C0            write();
0000f4 df6e      	RCALL _write
                 ; 0000 00C1         //read();
                 ; 0000 00C2       }
0000f5 cffd      	RJMP _0x32
                 ; 0000 00C3 
                 ; 0000 00C4 }
                 _0x35:
0000f6 cfff      	RJMP _0x35
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f7 93aa      	ST   -Y,R26
0000f8 b3e2      	IN   R30,0x12
0000f9 70ef      	ANDI R30,LOW(0xF)
0000fa 2fae      	MOV  R26,R30
0000fb 81e8      	LD   R30,Y
0000fc 7fe0      	ANDI R30,LOW(0xF0)
0000fd 2bea      	OR   R30,R26
0000fe bbe2      	OUT  0x12,R30
0000ff d0ea      	RCALL SUBOPT_0x7
000100 9aaa      	SBI  0x15,2
000101 d0e8      	RCALL SUBOPT_0x7
000102 98aa      	CBI  0x15,2
000103 d0e6      	RCALL SUBOPT_0x7
000104 c086      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000105 93aa      	ST   -Y,R26
000106 81a8      	LD   R26,Y
000107 dfef      	RCALL __lcd_write_nibble_G100
000108 81e8          ld    r30,y
000109 95e2          swap  r30
00010a 83e8          st    y,r30
00010b 81a8      	LD   R26,Y
00010c dfea      	RCALL __lcd_write_nibble_G100
                +
00010d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00010e 958a     +DEC R24
00010f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000110 c07a      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000111 93aa      	ST   -Y,R26
000112 81e8      	LD   R30,Y
000113 e0f0      	LDI  R31,0
000114 59ee      	SUBI R30,LOW(-__base_y_G100)
000115 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000116 81e0      	LD   R30,Z
000117 81a9      	LDD  R26,Y+1
000118 0fae      	ADD  R26,R30
000119 dfeb      	RCALL __lcd_write_data
00011a 81e9      	LDD  R30,Y+1
00011b 93e0 0166 	STS  __lcd_x,R30
00011d 81e8      	LD   R30,Y
00011e 93e0 0167 	STS  __lcd_y,R30
000120 9622      	ADIW R28,2
000121 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000122 e0a2      	LDI  R26,LOW(2)
000123 dfe1      	RCALL __lcd_write_data
000124 e0a3      	LDI  R26,LOW(3)
000125 d0c2      	RCALL SUBOPT_0x6
000126 e0ac      	LDI  R26,LOW(12)
000127 dfdd      	RCALL __lcd_write_data
000128 e0a1      	LDI  R26,LOW(1)
000129 dfdb      	RCALL __lcd_write_data
00012a e0a3      	LDI  R26,LOW(3)
00012b d0bc      	RCALL SUBOPT_0x6
00012c e0e0      	LDI  R30,LOW(0)
00012d 93e0 0167 	STS  __lcd_y,R30
00012f 93e0 0166 	STS  __lcd_x,R30
000131 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000132 93aa      	ST   -Y,R26
000133 81a8      	LD   R26,Y
000134 30aa      	CPI  R26,LOW(0xA)
000135 f031      	BREQ _0x2000005
000136 91e0 0168 	LDS  R30,__lcd_maxx
000138 91a0 0166 	LDS  R26,__lcd_x
00013a 17ae      	CP   R26,R30
00013b f060      	BRLO _0x2000004
                 _0x2000005:
00013c e0e0      	LDI  R30,LOW(0)
00013d 93ea      	ST   -Y,R30
00013e 91a0 0167 	LDS  R26,__lcd_y
000140 5faf      	SUBI R26,-LOW(1)
000141 93a0 0167 	STS  __lcd_y,R26
000143 dfcd      	RCALL _lcd_gotoxy
000144 81a8      	LD   R26,Y
000145 30aa      	CPI  R26,LOW(0xA)
000146 f409      	BRNE _0x2000007
000147 c043      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
000148 91e0 0166 	LDS  R30,__lcd_x
00014a 5fef      	SUBI R30,-LOW(1)
00014b 93e0 0166 	STS  __lcd_x,R30
00014d 9aa8      	SBI  0x15,0
00014e 81a8      	LD   R26,Y
00014f dfb5      	RCALL __lcd_write_data
000150 98a8      	CBI  0x15,0
000151 c039      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000152 93ba      	ST   -Y,R27
000153 93aa      	ST   -Y,R26
000154 931a      	ST   -Y,R17
                 _0x2000008:
000155 81a9      	LDD  R26,Y+1
000156 81ba      	LDD  R27,Y+1+1
000157 91ed      	LD   R30,X+
000158 83a9      	STD  Y+1,R26
000159 83ba      	STD  Y+1+1,R27
00015a 2f1e      	MOV  R17,R30
00015b 30e0      	CPI  R30,0
00015c f019      	BREQ _0x200000A
00015d 2fa1      	MOV  R26,R17
00015e dfd3      	RCALL _lcd_putchar
00015f cff5      	RJMP _0x2000008
                 _0x200000A:
000160 8118      	LDD  R17,Y+0
000161 9623      	ADIW R28,3
000162 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000163 93aa      	ST   -Y,R26
000164 b3e1      	IN   R30,0x11
000165 6fe0      	ORI  R30,LOW(0xF0)
000166 bbe1      	OUT  0x11,R30
000167 9aa2      	SBI  0x14,2
000168 9aa0      	SBI  0x14,0
000169 9aa1      	SBI  0x14,1
00016a 98aa      	CBI  0x15,2
00016b 98a8      	CBI  0x15,0
00016c 98a9      	CBI  0x15,1
00016d 81e8      	LD   R30,Y
00016e 93e0 0168 	STS  __lcd_maxx,R30
000170 58e0      	SUBI R30,-LOW(128)
                +
000171 93e0 0164+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000173 81e8      	LD   R30,Y
000174 54e0      	SUBI R30,-LOW(192)
                +
000175 93e0 0165+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000177 e1a4      	LDI  R26,LOW(20)
000178 d06f      	RCALL SUBOPT_0x6
000179 d074      	RCALL SUBOPT_0x8
00017a d073      	RCALL SUBOPT_0x8
00017b d072      	RCALL SUBOPT_0x8
00017c e2a0      	LDI  R26,LOW(32)
00017d df79      	RCALL __lcd_write_nibble_G100
                +
00017e ec88     +LDI R24 , LOW ( 200 )
00017f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000180 9701     +SBIW R24 , 1
000181 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000182 e2a8      	LDI  R26,LOW(40)
000183 df81      	RCALL __lcd_write_data
000184 e0a4      	LDI  R26,LOW(4)
000185 df7f      	RCALL __lcd_write_data
000186 e8a5      	LDI  R26,LOW(133)
000187 df7d      	RCALL __lcd_write_data
000188 e0a6      	LDI  R26,LOW(6)
000189 df7b      	RCALL __lcd_write_data
00018a df97      	RCALL _lcd_clear
                 _0x20A0001:
00018b 9621      	ADIW R28,1
00018c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00018d 93ba      	ST   -Y,R27
00018e 93aa      	ST   -Y,R26
00018f 91a9          ld   r26,y+
000190 91b9          ld   r27,y+
000191 91e9          ld   r30,y+
000192 91f9          ld   r31,y+
000193 9630          adiw r30,0
000194 f42a          brpl __itoa0
000195 95e0          com  r30
000196 95f0          com  r31
000197 9631          adiw r30,1
000198 e26d          ldi  r22,'-'
000199 936d          st   x+,r22
                 __itoa0:
00019a 94e8          clt
00019b e180          ldi  r24,low(10000)
00019c e297          ldi  r25,high(10000)
00019d d00d          rcall __itoa1
00019e ee88          ldi  r24,low(1000)
00019f e093          ldi  r25,high(1000)
0001a0 d00a          rcall __itoa1
0001a1 e684          ldi  r24,100
0001a2 2799          clr  r25
0001a3 d007          rcall __itoa1
0001a4 e08a          ldi  r24,10
0001a5 d005          rcall __itoa1
0001a6 2f6e          mov  r22,r30
0001a7 d010          rcall __itoa5
0001a8 2766          clr  r22
0001a9 936c          st   x,r22
0001aa 9508          ret
                 
                 __itoa1:
0001ab 2766          clr	 r22
                 __itoa2:
0001ac 17e8          cp   r30,r24
0001ad 07f9          cpc  r31,r25
0001ae f020          brlo __itoa3
0001af 9563          inc  r22
0001b0 1be8          sub  r30,r24
0001b1 0bf9          sbc  r31,r25
0001b2 f7c9          brne __itoa2
                 __itoa3:
0001b3 2366          tst  r22
0001b4 f411          brne __itoa4
0001b5 f016          brts __itoa5
0001b6 9508          ret
                 __itoa4:
0001b7 9468          set
                 __itoa5:
0001b8 5d60          subi r22,-0x30
0001b9 936d          st   x+,r22
0001ba 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _j:
000160           	.BYTE 0x2
                 __base_y_G100:
000162           	.BYTE 0x4
                 __lcd_x:
000166           	.BYTE 0x1
                 __lcd_y:
000167           	.BYTE 0x1
                 __lcd_maxx:
000168           	.BYTE 0x1
                 __seed_G101:
000169           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001bb 81aa      	LDD  R26,Y+2
0001bc 81bb      	LDD  R27,Y+2+1
0001bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
0001be 81e8      	LD   R30,Y
0001bf 81f9      	LDD  R31,Y+1
0001c0 30e1      	CPI  R30,LOW(0x1)
0001c1 e0a0      	LDI  R26,HIGH(0x1)
0001c2 07fa      	CPC  R31,R26
0001c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0001c4 30e2      	CPI  R30,LOW(0x2)
0001c5 e0a0      	LDI  R26,HIGH(0x2)
0001c6 07fa      	CPC  R31,R26
0001c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
0001c8 30e3      	CPI  R30,LOW(0x3)
0001c9 e0a0      	LDI  R26,HIGH(0x3)
0001ca 07fa      	CPC  R31,R26
0001cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0001cc 30e4      	CPI  R30,LOW(0x4)
0001cd e0a0      	LDI  R26,HIGH(0x4)
0001ce 07fa      	CPC  R31,R26
0001cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:67 WORDS
                 SUBOPT_0x5:
0001d0 015f      	MOVW R10,R30
                +
0001d1 92c0 0160+STS _j + ( 0 ) , R12
0001d3 92d0 0161+STS _j + ( 0 ) + 1 , R13
                 	__PUTWMRN _j,0,12,13
0001d5 91e0 0160 	LDS  R30,_j
0001d7 91f0 0161 	LDS  R31,_j+1
0001d9 9733      	SBIW R30,3
0001da 93fa      	ST   -Y,R31
0001db 93ea      	ST   -Y,R30
0001dc 01d5      	MOVW R26,R10
0001dd de89      	RCALL _check2
0001de 013f      	MOVW R6,R30
0001df 927a      	ST   -Y,R7
0001e0 926a      	ST   -Y,R6
0001e1 01d2      	MOVW R26,R4
0001e2 dfaa      	RCALL _itoa
0001e3 01d2      	MOVW R26,R4
0001e4 df6d      	RCALL _lcd_puts
0001e5 eca8      	LDI  R26,LOW(200)
0001e6 e0b0      	LDI  R27,0
0001e7 c00d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0001e8 e0b0      	LDI  R27,0
0001e9 c00b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
                +
0001ea e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001eb 958a     +DEC R24
0001ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
0001ee e3a0      	LDI  R26,LOW(48)
0001ef df07      	RCALL __lcd_write_nibble_G100
                +
0001f0 ec88     +LDI R24 , LOW ( 200 )
0001f1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001f2 9701     +SBIW R24 , 1
0001f3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001f4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001f5 9610      	adiw r26,0
0001f6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001f7 ed80     +LDI R24 , LOW ( 0x7D0 )
0001f8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001f9 9701     +SBIW R24 , 1
0001fa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001fb 95a8      	wdr
0001fc 9711      	sbiw r26,1
0001fd f7c9      	brne __delay_ms0
                 __delay_ms1:
0001fe 9508      	ret
                 
                 __LSLB12:
0001ff 23ee      	TST  R30
000200 2e0e      	MOV  R0,R30
000201 2fea      	MOV  R30,R26
000202 f019      	BREQ __LSLB12R
                 __LSLB12L:
000203 0fee      	LSL  R30
000204 940a      	DEC  R0
000205 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000206 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   2 r7 :   1 
r8 :   1 r9 :   0 r10:   2 r11:   0 r12:   6 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  23 r25:  10 r26:  66 r27:  11 r28:   5 r29:   1 r30: 119 r31:  39 
x  :   7 y  :  44 z  :   8 
Registers used: 22 out of 35 (62.9%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   8 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  34 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   5 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 cp    :   3 
cpc   :   6 cpi   :   7 cpse  :   0 dec   :   4 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   1 ld    :  18 ldd   :   8 ldi   : 100 lds   :   6 lpm   :   7 
lsl   :   1 lsr   :   0 mov   :   7 movw  :  11 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   1 ori   :   3 out   :  16 
pop   :   0 push  :   0 rcall :  63 ret   :  20 reti  :   0 rjmp  :  54 
rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 sbi   :   5 sbic  :   0 
sbis  :   5 sbiw  :  12 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  24 std   :   2 
sts   :  11 sub   :   1 subi  :   6 swap  :   1 tst   :   2 wdr   :   1 

Instructions used: 47 out of 114 (41.2%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00040e    996     42   1038    8192  12.7%
[.dseg] 0x000060 0x00016d      0     13     13    1024   1.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
